import telegram
from telegram.constants import ParseMode
from service.logger import logger
from service.settings import TELEGRAM_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telegram.Bot(token=TELEGRAM_TOKEN)


async def send_telegram_message(message, chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç.
    :return: message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        result = await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True  # üîá –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
        )
        return result.message_id
    except telegram.error.TelegramError as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}")
        return None


async def edit_telegram_message(message, chat_id, message_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç–µ.
    """
    try:
        result = await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True  # üîá –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
        )
        return result
    except telegram.error.TelegramError as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}")
        return None


async def send_image(chat_id, image_path, caption=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç.
    :return: message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        with open(image_path, 'rb') as photo:
            result = await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                parse_mode=ParseMode.HTML
            )
        return result.message_id
    except telegram.error.TelegramError as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error}")
        return None


async def delete_message(chat_id, message_id):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram —á–∞—Ç–∞.
    """
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except telegram.error.TelegramError as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}")


async def edit_image_message(chat_id, old_message_id, new_image_path, new_caption=None):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞ –Ω–æ–≤–æ–µ.
    :return: message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_message(chat_id, old_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message_id = await send_image(chat_id, new_image_path, new_caption)
    return new_message_id

from service.logger import logger
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, Tuple, Optional

TICKER_NAMES = {
    "GOLD": "–ó–æ–ª–æ—Ç–æ",
    "BZ=F": "–ù–µ—Ñ—Ç—å Brent",
    "^GSPC": "S&P 500",
    "^IXIC": "NASDAQ",
    "IMOEX.ME": "–ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏",
    "EURUSD=X": "EUR-USD",
    "USDBYN=X": "USD-BYN",
    "USDKZT=X": "USD-KZT",
    "USDUAH=X": "USD-UAH"
}

CURRENCY_FLAGS = {
    "USD-RUB": "üá∫üá∏",
    "EUR-RUB": "üá™üá∫",
    "CNY-RUB": "üá®üá≥",
    "AED-RUB": "üá¶üá™",
    "THB-RUB": "üáπüá≠"
}

FINANCE_EMOJIS = {
    "–ó–æ–ª–æ—Ç–æ": "üëë",
    "–ù–µ—Ñ—Ç—å Brent": "üõ¢Ô∏è",
    "S&P 500": "üìà",
    "NASDAQ": "üìä",
    "–ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏": "üá∑üá∫",
    "EUR-USD": "üá∫üá∏",
    "USD-BYN": "üáßüáæ",
    "USD-KZT": "üá∞üáø",
    "USD-UAH": "üá∫üá¶"
}

CRYPTO_EMOJIS = {
    "BTC": "‚Çø",
    "ETH": "‚ß´",
    "XRP": "‚úï",
    "BNB": "…É",
    "SOL": "‚òÄÔ∏è",
    "DOGE": "üê∂",
    "TRX": "üé≠",
    "USDC": "üíµ",
    "ADA": "‚Ç≥",
    "TONCOIN": "üíé",
    "SHIB": "Êü¥",
    "PEPE": "üê∏",
    "MATIC": "üü™",
    "LINK": "üîó",
    "LTC": "‚ö°",
    "AVAX": "üèîÔ∏è",
    "DOT": "üåê"
}

DEFAULT_EMOJIS = {
    'currency': 'üí±',
    'finance': 'üåê',
    'crypto': 'ü™ô'
}


class EmojiResolver:
    @staticmethod
    def get_currency_flag(pair: str) -> str:
        return CURRENCY_FLAGS.get(pair, DEFAULT_EMOJIS['currency'])

    @staticmethod
    def get_finance_emoji(name: str) -> str:
        return FINANCE_EMOJIS.get(name, DEFAULT_EMOJIS['finance'])

    @staticmethod
    def get_crypto_emoji(code: str) -> str:
        return CRYPTO_EMOJIS.get(code, DEFAULT_EMOJIS['crypto'])


class TimeUtils:
    @staticmethod
    def get_moscow_time() -> Tuple[str, str]:
        tz = timezone(timedelta(hours=3))
        now = datetime.now(tz)
        return now.strftime("%d.%m.%Y"), now.strftime("%H:%M")


class Formatter:
    @staticmethod
    def _round(value: float, precision: int) -> float:
        try:
            return round(float(value), precision)
        except (TypeError, ValueError):
            logger.warning(f"Failed to round value: {value}")
            return value

    @staticmethod
    def _format_number(value: Any) -> str:
        try:
            number = float(value)
            return f"{number:,.2f}".replace(",", " ").replace(".", ",")
        except (TypeError, ValueError):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
            return str(value)

    @staticmethod
    def _format_change(label: str, change: Any, is_crypto: bool) -> Optional[str]:
        if change is None:
            return None

        try:
            number = float(str(change).replace("%", "").replace(",", ".").replace("‚àí", "-").strip())
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ '{change}': {e}")
            return None

        if abs(number) <= 0.01:
            return f"{label}:    0.00%"  # –°—Ç–∞—Ç–∏—á–Ω–∞—è —à–∏—Ä–∏–Ω–∞

        if is_crypto:
            arrow = "üü¢" if number > 0 else "üîª"
        else:
            arrow = "‚ñ≤" if number > 0 else "‚ñº"

        formatted_number = f"{abs(number):5.2f}%"
        return f"{label}: {arrow} {formatted_number}"

    def _format_line(
        self,
        name: str,
        value: Any,
        change_1h: Optional[Any] = None,
        change_1d: Optional[Any] = None,
        change_1w: Optional[Any] = None,
        emoji: str = "",
        is_crypto: bool = False
    ) -> str:
        logger.debug(f"Formatting line for {name} with value={value}, 1h={change_1h}, 1d={change_1d}, 1w={change_1w}")

        changes = []
        for label, change in [("h", change_1h), ("d", change_1d), ("w", change_1w)]:
            formatted = self._format_change(label, change, is_crypto)
            if formatted:
                changes.append(formatted)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
        changes_str = "     " + "   ".join(changes) if changes else ""

        return f"{emoji} {name}: <code>{value}</code>\n{changes_str}\n"

    def format_currency_block(self, rates: Dict[str, Dict[str, Any]]) -> str:
        if not rates:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–∫–∞ –≤–∞–ª—é—Ç")
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –¶–ë –†–§.\n"

        lines = ["<b>üí∞ –ö—É—Ä—Å—ã –¶–ë –†–§:</b>\n"]
        for pair, data in rates.items():
            value = data.get("value")
            if value is None:
                continue
            lines.append(self._format_line(
                name=pair,
                value=self._format_number(value),
                change_1h=data.get("change_1h"),
                change_1d=data.get("change_1d"),
                change_1w=data.get("change_1w"),
                emoji=EmojiResolver.get_currency_flag(pair),
                is_crypto=False
            ))
        return "".join(lines) + "\n" if len(lines) > 1 else ""

    def format_financial_block(self, data: Dict[str, Dict[str, Any]]) -> str:
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö.\n"

        lines = ["<b>üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n"]
        for ticker, entry in data.items():
            value = entry.get("value")
            if value is None:
                continue
            name = TICKER_NAMES.get(ticker, ticker)
            lines.append(self._format_line(
                name=name,
                value=self._format_number(value),
                change_1h=entry.get("change_1h"),
                change_1d=entry.get("change_1d"),
                change_1w=entry.get("change_1w"),
                emoji=EmojiResolver.get_finance_emoji(name),
                is_crypto=False
            ))
        return "".join(lines) + "\n" if len(lines) > 1 else ""

    def format_crypto_block(self, data: Dict[str, Dict[str, Any]]) -> str:
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö.\n"

        lines = ["<b>üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫ $:</b>\n"]
        for code, entry in data.items():
            value = entry.get("value")
            if value is None:
                continue
            precision = 2 if code == "BTC" else 4
            rounded = self._round(value, precision)
            formatted_value = self._format_number(rounded)
            lines.append(self._format_line(
                name=code,
                value=formatted_value,
                change_1h=entry.get("change_1h"),
                change_1d=entry.get("change_1d"),
                change_1w=entry.get("change_1w"),
                emoji=EmojiResolver.get_crypto_emoji(code),
                is_crypto=True
            ))
        return "".join(lines)


def create_telegram_message(
    cbr_rates: Dict[str, Dict[str, Any]],
    finance_data: Dict[str, Dict[str, Any]],
    crypto_data: Dict[str, Dict[str, Any]]
) -> str:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è")
    date_str, time_str = TimeUtils.get_moscow_time()
    header = f"<b>üöì {date_str}</b> üïí Upd: <code>{time_str} –ú–°–ö</code>\n\n"

    formatter = Formatter()
    blocks = [
        formatter.format_currency_block(cbr_rates),
        formatter.format_financial_block(finance_data),
        formatter.format_crypto_block(crypto_data)
    ]

    footer = 'üöì <a href="https://t.me/currency_patrol">–§–∏–Ω–ü–∞—Ç—Ä—É–ª—å</a> | #USD #BTC #–∫—É—Ä—Å_—Ä—É–±–ª—è'
    message = header + "".join(block for block in blocks if block.strip()) + "\n" + footer
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ")
    return message


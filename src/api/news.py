import asyncio
import aiohttp
from datetime import datetime
from deep_translator import YandexTranslator
from service.settings import (
    CRYPTOPANIC_TOKEN,
    YANDEX_TRANSLATE_API_KEY,
    YANDEX_FOLDER_ID,
)
from telegr.sender import send_telegram_message
from service.logger import logger

CRYPTOPANIC_API_URL = "https://cryptopanic.com/api/v1/posts/"
CHANNEL = "@test_mix38"


async def translate_text(text: str, target_lang="ru") -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ Yandex Cloud Translate API.
    """
    try:
        translated = await asyncio.to_thread(
            YandexTranslator(
                api_key=YANDEX_TRANSLATE_API_KEY,
                folder_id=YANDEX_FOLDER_ID,
                source="en",
                target=target_lang,
            ).translate,
            text,
        )
        return translated
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ø–Ω–¥–µ–∫—Å: {e}")
        return text


async def get_news_digest(when: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram-–ø–æ—Å—Ç–∞ (HTML) —Å –∞–Ω–≥–ª+—Ä—É—Å.
    :param when: '—É—Ç—Ä–æ' –∏–ª–∏ '–≤–µ—á–µ—Ä'
    :return: str ‚Äî –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    """
    params = {
        "auth_token": CRYPTOPANIC_TOKEN,
        "filter": "hot",
        "public": "true",
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(CRYPTOPANIC_API_URL, params=params) as resp:
                if resp.status != 200:
                    logger.error(f"CryptoPanic API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return ""
                data = await resp.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ CryptoPanic API: {e}")
            return ""

    posts = data.get("results", [])[:3]
    if not posts:
        logger.warning("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ CryptoPanic")
        return ""

    now = datetime.now().strftime("%d.%m.%Y")
    header = f"üöì <b>–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ –∫ {when} ({now}):</b>\n"

    lines = []
    total_chars = 0

    for post in posts:
        title_en = post.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        url = post.get("url", "")

        translated_title = await translate_text(title_en)
        total_chars += len(title_en)

        line = (
            f"‚Äî <a href=\"{url}\">{title_en}</a>\n"
            f"  ({translated_title})"
        )
        lines.append(line)

    logger.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ –∑–∞–ø—É—Å–∫: {total_chars}")

    text = (
        header + "\n\n" + "\n\n".join(lines) + "\n\nüëâ @currency_patrol"
    )
    return text


async def main():
    news_text = await get_news_digest("—É—Ç—Ä—É")  # –∏–ª–∏ "–≤–µ—á–µ—Ä"
    if not news_text:
        print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
        return

    print("\n--- –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---\n")
    print(news_text)

    await send_telegram_message(news_text, CHANNEL)
    logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ {CHANNEL}")


if __name__ == "__main__":
    asyncio.run(main())

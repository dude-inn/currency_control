import asyncio
from datetime import datetime, timedelta, time

import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from service.logger import logger
from telegr.sender import send_telegram_message, edit_telegram_message
from create_telegram_message import create_telegram_message
from get_cb_data import get_currency_rates
from get_yahoo_data import get_prices as get_yahoo_prices
from get_crypto_data import get_prices as get_crypto_prices
from service.settings import TELEGRAM_CHANNEL_ID, DEBUG
import json
from database import Database
from data_processor import process_data


class TelegramBot:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.db = Database()
        self._init_message_state()

    def _init_message_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ ID)."""
        today_message = self.db.get_today_message()
        if today_message:
            self.message_id, _ = today_message
            self.is_editing_active = True
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (ID: {self.message_id}).")
        else:
            self.message_id = None
            self.is_editing_active = False
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        self.scheduler.add_job(
            self.clear_old_data,
            trigger="interval",
            hours=24,
            timezone="Europe/Moscow"
        )
        logger.info("–ó–∞–¥–∞—á–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 24—á).")

    async def stop_editing(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        self.is_editing_active = False
        logger.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    async def fetch_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Ö."""
        try:
            cbr_rates = get_currency_rates()
            finance_data = await get_yahoo_prices()
            crypto_data = await get_crypto_prices()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            for name, data in (
                ("–¶–ë –†–§", cbr_rates),
                ("Yahoo Finance", finance_data),
                ("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", crypto_data)
            ):
                for key, value in data.items():
                    if value == 0:
                        logger.warning(f"–ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ {name} –¥–ª—è {key}")

            return cbr_rates, finance_data, crypto_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}, {}, {}

    async def clear_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã."""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        self.db.clear_old_data()
        logger.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def fetch_and_process_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
        cbr_rates, finance_data, crypto_data = await self.fetch_data()

        yesterday_data = self.db.get_yesterday_last_data()
        old_data = {}

        if yesterday_data:
            _, old_data_str = yesterday_data
            try:
                if isinstance(old_data_str, str):
                    old_data = json.loads(old_data_str)
                elif isinstance(old_data_str, dict):
                    old_data = old_data_str
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è old_data: {e}")
                old_data = {}

        processed_cbr_rates = process_data(cbr_rates, old_data.get("cbr_rates", {}))
        processed_finance_data = process_data(finance_data, old_data.get("finance_data", {}))
        processed_crypto_data = process_data(crypto_data, old_data.get("crypto_data", {}), is_crypto=True)

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.save_history_snapshot(processed_cbr_rates, processed_finance_data, processed_crypto_data)

        return processed_cbr_rates, processed_finance_data, processed_crypto_data

    def save_history_snapshot(self, cbr_rates, finance_data, crypto_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏."""
        for ticker, item in cbr_rates.items():
            self.db.save_history_data(ticker, item["value"], "cbr")
        for ticker, item in finance_data.items():
            self.db.save_history_data(ticker, item["value"], "finance")
        for ticker, item in crypto_data.items():
            self.db.save_history_data(ticker, item["value"], "crypto")

    async def _send_new_message(self, processed_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
        telegram_message = create_telegram_message(*processed_data)
        self.message_id = await send_telegram_message(telegram_message, TELEGRAM_CHANNEL_ID)

        if not self.message_id:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {self.message_id})")
        self.is_editing_active = True

        data_to_save = {
            "cbr_rates": processed_data[0],
            "finance_data": processed_data[1],
            "crypto_data": processed_data[2]
        }
        self.db.save_data(self.message_id, json.dumps(data_to_save))
        self.db.save_daily_data(json.dumps(data_to_save))

    async def send_daily_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if self.db.get_today_message():
            logger.info("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            await self.edit_message()
            return

        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        await self._send_new_message(await self.fetch_and_process_data())

    async def edit_message(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î —Ç–æ–ª—å–∫–æ –≤ 23:57."""
        if not (self.is_editing_active and self.message_id):
            return

        processed_data = await self.fetch_and_process_data()
        updated_message = create_telegram_message(*processed_data)

        if await edit_telegram_message(updated_message, TELEGRAM_CHANNEL_ID, self.message_id):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (23:57 ¬±2 –º–∏–Ω—É—Ç—ã)
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz).time()
            target_time = time(23, 57)

            if current_time.hour == target_time.hour and target_time.minute - 2 <= current_time.minute <= target_time.minute + 2:
                data_to_save = {
                    "cbr_rates": processed_data[0],
                    "finance_data": processed_data[1],
                    "crypto_data": processed_data[2]
                }
                self.db.save_last_daily_message(self.message_id, data_to_save)
        else:
            logger.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á."""
        self.db.clear_invalid_data()

        if DEBUG:
            logger.info("\n\n–†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò")
            self._setup_debug_jobs()
        else:
            self._setup_production_jobs()

        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    def _setup_debug_jobs(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏."""
        now = datetime.now()
        self.scheduler.add_job(self.send_daily_message, trigger="date", run_date=now + timedelta(seconds=10))
        self.scheduler.add_job(self.edit_message, trigger="interval", seconds=30)
        self.scheduler.add_job(self.stop_editing, trigger="date", run_date=now + timedelta(minutes=5))

    def _setup_production_jobs(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞."""
        if not self.db.get_today_message():
            self.scheduler.add_job(self.send_daily_message, trigger="date", run_date=datetime.now() + timedelta(seconds=10))

        self.scheduler.add_job(self.send_daily_message, trigger="cron", hour=0, minute=0, timezone="Europe/Moscow")
        self.scheduler.add_job(self.edit_message, trigger="interval", minutes=3)
        self.scheduler.add_job(self.edit_message, trigger="cron", hour=23, minute=57, timezone="Europe/Moscow")
        self.scheduler.add_job(self.stop_editing, trigger="cron", hour=23, minute=59, timezone="Europe/Moscow")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    bot = TelegramBot()
    await bot.start_scheduler()
    try:
        while True:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        bot.stop_scheduler()


if __name__ == "__main__":
    asyncio.run(main())
